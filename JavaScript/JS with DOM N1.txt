-> Document Object Model (DOM) is a kind of "flow chart" representation of an HTML Document.

-> Browser understands DOM more easily than default HTML document format.

-> We have three nodes in it namely, "Element node", "Attribute node" and "Text node".

-> We use "script tag" in HTML document to include JS code.

-> This script tag can be written anywhere (in or out) in HTML document. But it is adviced to use it in the end.

-> The syntax to print text using js in HTML is
	
	<script type= "text/javascript">
		document.write("<h1> Hello World </h1>");
	</script>

-> There are three types of datatypes in JS namely "Primitive" (Numbers, String, Boolean), "Composite" (Objects, Arrays), "Trivial/ Other Types" (null, undefined). 

-> alert() function is used to show a pop-up having a message as a parameter of the function.

-> We use "var" keyword while defining variables in JS. The twist is that we can do this without "var" keyword too. Such defining makes the variable global even if we define it inside some functions. The issue is that modern browsers restrict such defining.

-> We have a "window" object self generated by a browser not JS. This object contains whole front-end info of the webpage.

-> We have "document" object in "windows" object.

-> We have Local storage for data inputed in webpage. To perform anything in local storage, we use the syntax: Localstorage.builtinfunction()

	for example: localstorage.setItem(key, value) take key and value which are both strings only.

-> We can store whole object in local storage by converting it into string format first. For that, we use let variableName = JSON.stringfy(objectName) and put this in setItem() as a value (we can use any key name).

-> To return back to object format, we use JSON.parse(variableName)

-> We can create an html element by the createElement("element name") used on document object. The function returns the object of element to be stored in a variable.

-> addEventListener("event", function to be called) is used on html element to take the desired action on an event. This function to be called may accept a parameter (event) and return the action based on it.

	Alternatively, just use following example instead of event listener:

		const buttonA = document.querySelector("#button_A");
		const headingA = document.querySelector("#heading_A");

		let count = 1;

		buttonA.onclick = () => {
  		buttonA.textContent = "Try again!";
  		headingA.textContent = `${count} clicks so far`;
  		count += 1;
		};

-> document.querySelector("element name"), document.querySelectorAll("element name"), document.getElementById("element id"), etc. are used to select the html element to do some operation on them. To give attributes also, we can use "elementName[class="className"]" in the selector brackets. This is just one example.

-> document.textnode("text") is used to store desired text in a variable.

-> elementname.appendChild(anotherElement or variable) is used to append something in an element.




WEB APIs
-------------

	-> Web APIs, upto my understanding, are modules (or lib, packages) that contains classes.

	-> We divide Web APIs into two categories, namely, Browser APIs andd 3rd Party APIs.

	-> Browser APIs can be considered as standard library. By contrast, 3rd party APIs are not standard and has to be included explicitly.
