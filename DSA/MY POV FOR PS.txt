Consider the scenario of problem solving. If started from scratch, we might come to different cases to deal and solving them one by one may result into the answer. But, this is not at all the correct way to solve a problem or even if it, it is a bad practice. Because, mostly, such step by step procedure may not be the consequence or related to previous steps. What it means that, a step by step procedure i'm talking about here may just be a solution to independent fragments of the problem. Such cases can be grouped into edge cases or exceptions. And yes, such groups are very few as compared to actual set of test cases. So, the appropriate way should be to find a way that is systematic and consists of only those discrete part that leads to exceptions and edge cases. This is the reason we have algorithms and data structures.

Algorithm is legit to appear in front of anyone who has been doing same type of questions. No problem have only single way to reach the solution. Not all the solutions need to be equivalently efficient. So, the motive to find different ways of getting the solution definitely leads to what we call Algorithm.
An algo actually conveys a history. To imagine, an algorithm feels like a drawing of curves with very finite timestamps of lifting the pen. Everything meets at space and time. Algorithms are the efficient ways of solving a problem while data structures are the helpful storages that helps in efficient management of info, and their fetches. So, whenever try to solve a problem. First focus on understanding it. Find an algo and then lookup for the needs of storage and time. 

Tips and Observations
-----------------------------
-> Loops, if in ,if not in, are linear searchers.

-> In case of dictionary and sets, time complexity of "if" is unity.

-> If an immutable input is given, try to solve problem by making it mutable. (if not restricted).
