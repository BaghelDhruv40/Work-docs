So this page is my experience in learning of React and I have written here everything.

I started learning Web dev in about july 2024 and obviously started with HTML. HTML docs is the base of web sites. It is basically the pages that renders on the screen when we go to any url. Browser can be understood as an engine that fetches this document from its source and perform some operations to produce the result. So, browser knows HTML. It can manipulate it also. I've already written much about HTML in its notes. Then comes the CSS whom I'm not gonna talk about, but a lil bit. HTML gives us the least interactivity features. Much of the user interactivity comes from CSS. It helps us in decorating the document beautifully and add interactivity. Much of the interactivity through CSS relies on Javascript. Javascript is the ultimate tool for interactivity. Javascript can manipulate DOM and CSSOM. This is all about the base of a web page.

To go from one page to another, we have hyperlinks. So how the browser knows which file to load and which page to render? The main HTML document is named "index.html" and this thing browser knows. Okay, so the first page is loaded, what about the other? That's what hyperlinks used for. In hyperlinks, we mention the path of the file to load and render. This path is the url of that page. The file will be another complete html document. Further, we can use hyperlink for many puposes. If we use href="#section" in anchor tag, the page without a reload navigates to part having id="section". So kind of a single page navigation. Demerit of hyperlinks is that jumping from one page to another re loads the entire page even if the new page has just minor changes in its UI or content.

ReactJS library is a solution to many of the problems we face in page navigation, page rendering, etc. Through ReactJS, we can see a web page or its sub parts as reusable components. For example, we can make layout of a page as a component and use it for all pages. That's how we don't need the write all of its code again and again. 

ReactJS doesn't provide a way for page navigation. So we need external libraries for that. One such library is React-router-dom. Let first understand the page navigation in React JS.
We have an index.html file in our project and just has a div with id='root'. All of the html in this div is injected by javascript. But the interesting thing is that, we never see any script tag in this index.html so that javascript can work. Such script tag is injected by some mechanism within the React library.

Okay, so we got the javascript that will inject all of the desired html code in the index.html. This JS file is usally named as index.js in React projects. What this file do is that it uses React library method to create our index.html as the root for its own DOM and inject a component in it. This component is usually named <App/> and is nothing but a function. So we can also just call it in it as a function call. Our exploration of index.js file is done here.. Let's go to App.js file now.

This App.js file do most of the work. If we have a SPA, all of the components are to be dumped here in the desired sequence! Then we can just scroll to see different sections of the page. We can also use a library "react-scroll" that helps in auto scrolling to desired section within the page, or, we have the tradional way of using anchor tag with href="#sectionid" that takes us to mentioned section within the page but we might need to add the transition effect ourself.

But what if it's not a SPA? In that case, we need a library "react-router-dom". So how do we use it? This library provide us certain tags like <BrowserRouter></BroswerRouter>, <Routes></Routes>, <Route></Route>, etc.  The work flow is that we enclose our <App/> component in index.js within BrowserRouter component. After this, we define all route in App.js file. So, the routes defined in this file if written in the browser url bar, the corresponding component will render.

But, sometimes, the rendering of the page depends upon the validations from the backend. So, in the component to be render, we may send a request to backend related to same route and render the component based on the response. Obviously we have to use react hooks for this work, like useffect, useNavigate, useState, etc.

Okay, so all this gives the idea of client side rendering and all. So it kind of completes the basics of frontend part of our project. Let's dive into backend!

So assume we have a backend folder in our project to separate the concerns. In this folder we need nodemodules and some configuration related to it. The main file that will represent our server is usually named as "server.js" or "index.js" and is usually reside in src folder in the backend folder. This server.js file will define the server (that means import express module, app,routes) and listen on some port. Then we can have many folders in src folder but minimum are routes, controllers, models, middlewares, lib, etc.

