-> Numpy is a Python lib specifically for linear algebra.

-> np.array( [ [c11. c12, c13], [c21, c22, c23], [c31, c32, c3] ] ) is used to create n-dimensional array.

-> arr.shape is a property of array and so when used with the array named arr, gives the shape of arr.

-> arr.ndim property gives the dimension of the array.

-> arr.size property gives the total no. of elements.

-> arr.dtype property gives the type of the data in the array.

-> array here are static in nature (i.e., size can't be changed once defined).

-> array here must be rectangular and not jagged (i.e., each row must have same number of columns and viceversa)

-> np.zeros(size) creates an array of zeros having size no. of elements.

-> np.ones(size) creates an array of 1s.

-> While the default data type is floating point (np.float64), we can explicitly specify which data type we want using the dtype keyword.
Syntax: np.ones(2, dtype=np.int64)

-> np.empty(size) creates an array having garbage values. Considered faster than zero array but must be filled completely afterwards.

-> np.arange(size) creates an array with elements from 0 to size-1.

-> np.linspace(start, end, steps) creates an array with elements starting with "start" and upto "end"(inclusive) having difference=steps.

-> np.sort(arr) sorts the array named arr.

-> np.concatenate((arr1, arr2)) concatenate the two arrays named arr1 and arr2.

->  if we start with these arrays:

		x = np.array([[1, 2], [3, 4]])
		y = np.array([[5, 6]])

	We can concatenate them with:

		np.concatenate((x, y), axis=0)
		Output: array([[1, 2],
       					[3, 4],
       					[5, 6]])

-> arr.reshape(rows, cols) reshapes the array named arr.
	Alternatively, np.reshape(arr, newshape=(rows, cols)).
